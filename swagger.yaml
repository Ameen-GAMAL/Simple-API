openapi: 3.0.0
info:
  title: Book API
  version: 1.0.0
  description: A simple API for managing books.
servers:
  - url: http://localhost:5000
paths:
  /books:
    get:
      summary: Retrieve all books
      description: Get a list of all books in the library.
      responses:
        '200':
          description: A JSON array of book objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      description: Create a new book entry.
      requestBody:
        description: Book object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Retrieve a specific book
      description: Get a book by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A single book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update an existing book
      description: Update the details of a book by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated book object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete a book
      description: Remove a book from the library by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: '1984'
        author:
          type: string
          example: 'George Orwell'
    NewBook:
      type: object
      required:
        - title
        - author
      properties:
        title:
          type: string
          example: 'The Great Gatsby'
        author:
          type: string
          example: 'F. Scott Fitzgerald'
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Book deleted successfully'
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Book not found'
